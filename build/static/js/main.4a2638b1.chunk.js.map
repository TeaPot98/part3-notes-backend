{"version":3,"sources":["components/Note.jsx","components/Notification.jsx","components/Footer.jsx","services/notes.js","App.jsx","index.jsx"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","console","log","length","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a2638b1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    )\n}\n\nexport default Footer","import axios from 'axios'\n\n// const baseUrl = 'https://intense-reef-59636.herokuapp.com/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from'./services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  console.log(`render ${notes.length} notes`)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n        // console.log(notes)\n      })\n  }, [])\n\n  const addNote = event => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1, Omit the ID to let the server its own IDs\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange} />\n          <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}